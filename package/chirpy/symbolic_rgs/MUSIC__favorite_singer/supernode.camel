can_only_prompt_once_for = State.CurrentTopic

<ENTRY_CONDITIONS>
IS_TRUE(Flags.MUSIC__supernode_starts_responding) and
IS_FALSE(State.MUSIC__exit_supernode) and
IS_FALSE(State.MUSIC__fav_singer_was_triggered) and
IS_NONE(State.User__FavoriteSinger) and IS_NONE(State.User__FavoriteSingerStr) and
IS_FALSE(State.User__NoFavoriteSinger)

<PROMPTS>
Prompt ask_favorite_singer [
 ] {
    "Who is your favorite singer?"
}

<SET_STATE>
State.CurrentTopic = @val(Utilities.cur_entity)
State.User__FavoriteSinger = @val(Flags.MUSIC__fav_singer_ent)
State.User__FavoriteSingerStr = @val(Flags.MUSIC__fav_singer_str)
State.User__FavoriteSingerTalkable = @val(Flags.MUSIC__fav_singer_talkable)
Flags.MUSIC__supernode_starts_responding = @constant(True)

<SUBNODES>
Subnode singer_exists_with_database [
    not IS_NONE(State.User__FavoriteSingerStr) and
    EXISTS(database_name="music_singer", key={@val(State.User__FavoriteSingerStr | lower)})
] {
    - @lookup(database_name="music_singer", key={@val(State.User__FavoriteSingerStr | lower)}, column="comment")
} <
    Flags.MUSIC__follow_up_on_known_fav_singer_comment = @constant(True)
    Flags.MUSIC__follow_up_on_known_fav_singer_comment_extra = @constant(True)
>

Subnode generic_comment_on_band [
   not IS_NONE(State.User__FavoriteSingerStr) and
   IS_TRUE(Flags.MUSIC__singer_is_musical_group) and
   not EXISTS(database_name="music_singer", key={@val(State.User__FavoriteSingerStr | lower)})
] {
    - @val(Flags.MUSIC__fav_singer_comment)
    - @val(State.User__FavoriteSingerTalkable)
    - "is definitely a great band!"
    - @one_of(
        {
            - @val(State.User__FavoriteSingerTalkable)
            - "does really nice songs."
        },
        {
            - @val(State.User__FavoriteSingerTalkable)
            - "has some really good tunes."
        }
    )
}

Subnode generic_comment_on_singer [
   not IS_NONE(State.User__FavoriteSingerStr) and
   IS_FALSE(Flags.MUSIC__singer_is_musical_group) and
   not EXISTS(database_name="music_singer", key={@val(State.User__FavoriteSingerStr | lower)})
] {
    - @val(Flags.MUSIC__fav_singer_comment)
    - @val(State.User__FavoriteSingerTalkable)
    - "is definitely a great singer!"
    - @one_of(
        {
            - @val(State.User__FavoriteSingerTalkable)
            - "does really nice songs."
        },
        {
            - @val(State.User__FavoriteSingerTalkable)
            - "has some really good tunes."
        }
    )
}

Subnode only_know_singer_str [
   IS_NONE(State.User__FavoriteSinger) and
   not IS_NONE(State.User__FavoriteSingerStr) and
   not EXISTS(database_name="music_singer", key={@val(State.User__FavoriteSingerStr | lower)})
] {
    - "Oh I don't seem to recognize that artist, I definitely need to get out more."
}

Subnode no_fav_singer [
   IS_NONE(State.User__FavoriteSinger) and
   IS_NONE(State.User__FavoriteSingerStr) and
   (IS_TRUE(Flags.GlobalFlag__NO) or
   IS_TRUE(Flags.GlobalFlag__DONT_KNOW) or
   IS_TRUE(Flags.GlobalFlag__NOTHING) or
   IS_TRUE(Flags.MUSIC__user_has_negative_response))
] {
    - "Yeah, it can be hard to pick a particular singer when there are so many."
} <
     State.User__NoFavoriteSinger = @constant(True)
>

Subnode catch_all [
   IS_NONE(State.User__FavoriteSinger) and
   IS_NONE(State.User__FavoriteSingerStr) and
   IS_FALSE(Flags.GlobalFlag__NO) and
   IS_FALSE(Flags.GlobalFlag__DONT_KNOW) and
   IS_FALSE(Flags.GlobalFlag__NOTHING) and
   IS_FALSE(Flags.MUSIC__user_has_negative_response)
] {
    - "Oh I don't seem to recognize that."
}

<SET_STATE_AFTER>
State.MUSIC__fav_singer_was_triggered = {
    @constant(True)
}