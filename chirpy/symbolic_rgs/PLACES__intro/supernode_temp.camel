entry_state_conditions:
  - is_none: state.User__FavoritePlace

# THESE ARE EVALUATED AT THE PROMPT STAGE
prompts:
- prompt_name: favorite_place
  prompt_text: 
  - one of:
    - "What's your favorite city?"
    - "Which city do you most enjoy visiting?"
    - "What city do you like visiting the most?"

# THESE ARE EVALUATED AT THE GENERATION STAGE
# entry_conditions_takeover:
#   - is_true: GLOBAL__user_has_navigational_intent

# continue_conditions:
#   - is_true: flags.PLACES__user_mentioned_place

locals:
  intro_statement: # Ah yes, potatoes are one of my favorite things to eat up here...
    - one of: 
      - Oh! 
      - Cool!
      - Awesome!
      - Wow! 
      - No way!
      - Such an amazing choice.
    - val: 
    
    
set_state:
  state.User__FavoritePlace:
    - val: utilities.cur_entity
  state.User__FavoritePlaceTalkable:
    - val: utilities.cur_entity_talkable_lower
  state.User__FavoritePlaceIntroComment:
    - nlg_helper:
      name: get_intro_comment
      args: 
        - val: utilities.cur_entity_name
  state.User__FavoritePlacePopulation:
    - nlg_helper:
      name: get_city_population
      args:
        - val: utilities.cur_entity_name

subnodes:
  # This one shouldn't be necessary bc we only activate if the user mentions a food entity.
  # - node_name: entity_not_found
  #   entry_conditions:
  #     is_true: flags.no_food_entity_found
  #   response: ''
  #   needs_prompt: True
  #   state_updates:
  #     no_entity: True
  #   exit: True

  - node_name: make_city_intro_comment
    entry_conditions:
      - is_not_none: state.User__FavoritePlace
    response:
      - val: locals.intro_statement

  # I especially love how it's [NEURAL_GEN]...
  - node_name: default
    response: 
    - val: locals.intro_statement
    - neural_generation:
        prefix: 
          - I especially love
          - inflect:
              inflect_token: it's
              inflect_entity: utilities.cur_entity

set_state_after:
  flags.GlobalFlag__LastBotTurnWasOpenEnded:
    constant: True
