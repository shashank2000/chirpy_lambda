entry_flag_conditions:
  - is_true: state.PERSONALISSUE__supernode_is_responding

# THESE ARE EVALUATED AT THE PROMPT PHASE
prompts:
  - prompt_name: personal_issue_subsequent_turn
    prompt_text: ""

# THESE ARE EVALUATED AT THE FOLLOW-UP PHASE
entry_conditions_takeover:
  # None. This supernode should not takeover

continue_conditions:
  # None. If we are in this supernode, we should at least give a closing message

locals:
  validation_statement:
    - one of:
      - Mhm, I see.
      - Right, I see.
      - Ah, okay then.
      - I see.
      - Mm, I see.
      - Alright, I see.
      - Mhm, I hear you.
    - one of:
      - That sounds frustrating.
      - How awful, I'm sorry.
      - That's tough and really unfortunate.
  subsequent_turn_statement:
    - one of:
      - I'm sorry to hear that.
      - That sounds difficult.
      - That's really unfortunate.
      - That sounds frustrating.
      - How awful, I'm sorry.
      - That's tough and really unfortunate.
    - one of:
      - one of: # question
        - How long have you been feeling this way?
        - Is there anything you've been doing to help cope with this?
        - Do you think the situation might improve soon?
        - Is there anyone who might be able to help you get through this?
      - one of: # sharing
        - I'm here to listen if you would like to tell me more.
        - I would be interested to hear more if you don't mind sharing.
        - Feel free to continue telling me more.
        - Please continue telling me more if you would like to.
        - I'm willing to hear more if you'd like to tell me about it.
        - I'd be willing to listen if you're willing to continue sharing.
  partial_subsequent_turn_statement:
    - one of:
      - one of: # question
        - How long have you been feeling this way?
        - Is there anything you've been doing to help cope with this?
        - Do you think the situation might improve soon?
        - Is there anyone who might be able to help you get through this?
      - one of: # sharing
        - I'm here to listen if you would like to tell me more.
        - I would be interested to hear more if you don't mind sharing.
        - Feel free to continue telling me more.
        - Please continue telling me more if you would like to.
        - I'm willing to hear more if you'd like to tell me about it.
        - I'd be willing to listen if you're willing to continue sharing.
  possible_continue_statement:
    - one of: 
      - Mhm, I see.
      - Right, I see.
      - Ah, okay then.
      - I see.
      - Mm, I see.
      - Alright, I see.
      - Mhm, I hear you.
    - one of:
      - Would you like to tell me more about this?
      - Is there anything else you would like to tell me about this?
      - Was there something else you would like to talk about regarding this?
      - Is there anything else you would like to bring up?
      - Would you like to tell me more about that?
      - Would you like to talk more about that?
      - Do you want to talk about this more?
      - Do you want to talk more about what happened?
      - Would you like to tell me more about what happened?
      - Are there any other things that happened that you would like me to know about?
      - Is there anything else you want to tell me?
      - Do you want to talk some more about this?
  possible_continue_accepted_statement:
    - one of:
      - Okay.
      - Sure thing.
      - That's fine.
      - That's alright.
    - one of:
      - I'm here to listen if you would like to tell me more.
      - I would be interested to hear more if you don't mind sharing.
      - Feel free to continue telling me more.
      - Please continue telling me more if you would like to.
      - I'm willing to hear more if you'd like to tell me about it.
      - I'd be willing to listen if you're willing to continue sharing.
  ending_statement:
    - one of: # thank
      - Thank you for talking to me about this today.
      - Thanks for sharing this with me.
    - one of:
      - combine:
        - one of: # express opinion
          - I'm glad that we talked about this, 
          - I'm happy that we got to talk about this, 
        - and
        - one of: # reassure
          - I hope things will turn out alright.
          - I hope you'll be fine.
          - I hope you will be kind to yourself even when things are difficult.
          - As with all things, we can only take it one step at a time.
          - I hope that you'll be able to find a way to make the best of this situation, even if it's not what you wanted.
          - I hope things will turn out alright in the end, no matter how difficult they may seem now.
      - combine:
        - one of: # express opinion
          - I'm glad that we talked about this.
          - I'm happy that we got to talk about this.
      - combine:
        - one of: # reassure
          - I hope things will turn out alright, 
          - I hope you'll be fine, 
          - I hope you will be kind to yourself even when things are difficult, 
          - As with all things, we can only take it one step at a time, 
          - I hope that you'll be able to find a way to make the best of this situation, even if it's not what you wanted, 
          - I hope things will turn out alright in the end, no matter how difficult they may seem now, 
        - and
        - one of: # offer
          - I'm always here to listen if you need it.
          - I'm always happy to listen if you'd like to talk about this again.
          - I'll be here with a listening ear if you'd like to talk about this again.
    - Let's talk about something else then.
  can_enter_subsequent_turn:
    - bool:
      - or:
        - is_true: flags.PERSONALISSUE__is_continued_sharing
        - is_true: flags.PERSONALISSUE__personal_sharing_negative
        - and:
          - is_none: state.PERSONALISSUE__PreviousSubnode
          - is_true: flags.PERSONALISSUE__short_response
        - and:
          - is_value: 
              name: state.PERSONALISSUE__PreviousSubnode
              value: subsequent_turn
          - is_true: state.PERSONALISSUE__responded_with_question
          - or:
            - is_true: flags.GlobalFlag__YES
            - is_true: flags.GlobalFlag__NO
        - and:
          - is_value: 
              name: state.PERSONALISSUE__PreviousSubnode
              value: subsequent_turn
          - is_false: state.PERSONALISSUE__responded_with_question
          - is_true: flags.PERSONALISSUE__short_response
  
    
set_state:
  # No state to set
  

subnodes:
  # See above template in locals for how this response will be structured
  # Note: We set the state.PERSONALISSUE__PreviousSubnode to a general subsequent_turn
  # string instead of the specific subnode name b/c the specific name does not matter
  # Note for future development: Avoid storing the previous subnode as a state variable.
  # We are trying to move away from the response generator/treelet format. Instead of storing
  # the previous subnode, unpack the subnode name into multiple state variables. For example,
  # unpack PERSONALISSUE__PreviousSubnode into multiple booleans that we can use
  # to decide which subnode to go with next. This change will probably differ from the existing
  # implementations of our response generators, but it is ok to have this difference.
  - node_name: subsequent_turn_after_short_response
    entry_state_conditions:
      - is_true: locals.can_enter_subsequent_turn
      - is_true: flags.PERSONALISSUE__short_response
    response:
      - one of:
        - Okay, I'm listening.
        - Go ahead, I'm listening.
    set_state:
      flags.GlobalFlag__LastTurnUsedNeuralGeneration:
        constant: False
      state.PERSONALISSUE__PreviousSubnode:
        constant: subsequent_turn
  - node_name: subsequent_turn_after_question_response
    entry_state_conditions:
      - is_true: locals.can_enter_subsequent_turn
      - is_true: state.PERSONALISSUE__responded_with_question
    response:
      - val: locals.validation_statement
    set_state:
      flags.GlobalFlag__LastTurnUsedNeuralGeneration:
        constant: False
      state.PERSONALISSUE__PreviousSubnode:
        constant: subsequent_turn
  - node_name: subsequent_turn_templated
    entry_state_conditions:
      - is_true: locals.can_enter_subsequent_turn
      - is_true: flags.GlobalFlag__LastTurnUsedNeuralGeneration
    response:
      - val: locals.subsequent_turn_statement
    set_state:
      flags.GlobalFlag__LastTurnUsedNeuralGeneration:
        constant: False
      state.PERSONALISSUE__PreviousSubnode:
        constant: subsequent_turn
  - node_name: subsequent_turn_neural
    entry_state_conditions:
      - is_true: locals.can_enter_subsequent_turn
      - is_false: flags.GlobalFlag__LastTurnUsedNeuralGeneration
    response:
      - neural_generation:
          prefix: 
            - one of:
              - That sounds frustrating.
              - How awful, I'm sorry.
              - That's tough and really unfortunate.
            - one of:
              - hopefully
              - I hope
      - val: locals.partial_subsequent_turn_statement
    set_state:
      flags.GlobalFlag__LastTurnUsedNeuralGeneration:
        constant: True
      state.PERSONALISSUE__PreviousSubnode:
        constant: subsequent_turn
  - node_name: possible_continue
    entry_state_conditions:
      - or :
        - and:
          - is_value:
              name: state.PERSONALISSUE__PreviousSubnode
              value: possible_continue_accepted
          - or:
            - is_true: flags.GlobalFlag__YES
            - is_true: flags.PERSONALISSUE__noncommittal
        - and:
          - is_value:
              name: state.PERSONALISSUE__PreviousSubnode
              value: subsequent_turn
          - is_true: state.PERSONALISSUE__responded_with_question
          - is_true: flags.PERSONALISSUE__short_response
        - is_value:
            name: state.PERSONALISSUE__PreviousSubnode
            value: subsequent_turn
    response:
      - val: locals.possible_continue_statement
    set_state:
      flags.GlobalFlag__LastTurnUsedNeuralGeneration:
        constant: False
      state.PERSONALISSUE__PreviousSubnode:
        constant: possible_continue
  - node_name: possible_continue_accepted
    entry_state_conditions:
      - or:
        - and:
          - is_value:
              name: state.PERSONALISSUE__PreviousSubnode
              value: subsequent_turn
          - is_false: state.PERSONALISSUE__responded_with_question
          - is_true: flags.GlobalFlag__YES
        - and:
          - is_value:
              name: state.PERSONALISSUE__PreviousSubnode
              value: possible_continue
          - is_true: flags.GlobalFlag__YES
    response:
      - val: locals.possible_continue_accepted_statement
    set_state:
      flags.GlobalFlag__LastTurnUsedNeuralGeneration:
        constant: False
      state.PERSONALISSUE__PreviousSubnode:
        constant: possible_continue_accepted
  - node_name: ending
    entry_state_conditions:
      - or :
        - is_true: flags.GlobalFlag__DISINTERESTED
        - is_true: flags.PERSONALISSUE__gratitude
        - and:
            - is_one_of:
                name: state.PERSONALISSUE__PreviousSubnode
                values:
                  - null
                  - possible_continue
                  - possible_continue_accepted
            - is_true: flags.GlobalFlag__NO
        - and:
          - is_value:
              name: state.PERSONALISSUE__PreviousSubnode
              value: subsequent_turn
          - is_false: state.PERSONALISSUE__responded_with_question
          - or:
            - is_true: flags.PERSONALISSUE__gratitude
            - is_true: flags.GlobalFlag__NO
        - and:
          - is_value:
              name: state.PERSONALISSUE__PreviousSubnode
              value: possible_continue
          - or:
            - is_true: flags.PERSONALISSUE__short_response
            - is_true: flags.PERSONALISSUE__noncommittal
    response:
      - val: locals.ending_statement
    set_state:
      flags.GlobalFlag__LastTurnUsedNeuralGeneration:
        constant: False
      state.PERSONALISSUE__supernode_is_responding:
        constant: False
      state.PERSONALISSUE__PreviousSubnode:
        constant: ending

set_state_after:
  # The ending subnode will override this flag setting
  # state.PERSONALISSUE__supernode_is_responding:
  #   constant: True
  state.PERSONALISSUE__responded_with_question:
    - nlg_helper:
        name: response_contains_question
        args:
          - val: response_data.response