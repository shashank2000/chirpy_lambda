can_only_prompt_once_for = State.CurrentTopic

<ENTRY_CONDITIONS>
IS_NONE(State.User__HasPet) and IS_FALSE(Flags.PETS__move_on_to_new_topic)

<PROMPTS>
Prompt has_pet [ ] {
    "Do you have a pet?"
}

<CONTINUE_CONDITIONS>
IS_TRUE(Flags.PETS__user_mentioned_pet)


<SET_STATE>
State.CurrentTopic = @val(Utilities.cur_entity)
State.User__PetType = @helper.set_pet_type(@val(Utilities.cur_entity))

<SUBNODES>

Subnode valid_type [
  not IS_NONE(State.User__PetType)
  and IS_TRUE(Flags.PETS__user_owns_pet)
  and EXISTS(database_name="animal_gpt", key={@val(State.User__PetType)})
] {
  - "Isn't it awesome to own a pet!"
  - "I love"
  - @val(State.User__PetTypeTalkable)
  - "."
  - "Here's a fun fact about "
  - @val(State.User__PetTypeTalkable)
  - ": "
  -@lookup(
        database_name="animal_gpt",
        key={@val(State.User__PetType)},
        column="factoid"
   )
}

Subnode has_pet [
   IS_TRUE(Flags.PETS__user_owns_pet)
] {
   - "Isn't it awesome to own a pet!"
} <
    State.User__HasPet = @constant(True)
>

Subnode has_no_pet [
   IS_TRUE(Flags.PETS__user_owns_no_pet)
] {
   - "Oh interesting! That makes me think --"
} <
    State.User__HasPet = @constant(False)
>

Subnode move_on_from_pets [
   IS_TRUE(Flags.PETS__move_on_to_new_topic)
] {
   "I did not quite catch that. Maybe we should talk about something else."
}

Subnode default [
] {
  - "Sorry, I didn't quite catch that! I'd love to learn more about your experience with animals, so let's start again."
}


